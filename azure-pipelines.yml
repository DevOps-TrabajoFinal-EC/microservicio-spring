jobs:
- job: Build
  pool:
    vmImage: ubuntu-latest
  displayName: Build

###Build Gradle
  steps: 
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false
    displayName: Build

###JaCoCo
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
      pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
      reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
      failIfCoverageEmpty: true
    displayName: 'JaCoCo test'

###SonarCloud Analysis
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloudEC'
      organization: 'devops-trabajofinal-ec'
      projectKey: 'DevOps-TrabajoFinal-EC_microservicio-spring'
      projectName: 'microservicio-spring'
    displayName: 'SonarCloud Prepare'

  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'sonar'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: true
      sqGradlePluginVersionChoice: 'specify'
      sonarQubeGradlePluginVersion: '3.3'
      spotBugsAnalysis: false
    displayName: 'SonarCloud Analysis'

###Pipeline break
  - task: sonarcloud-buildbreaker@2
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'devops-trabajofinal-ec'
    displayName: 'Validate Quality Gate'  
      
###Docker build
  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      command: 'login'
    displayName: 'Docker Login'
  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      repository: 'nsg2020/microservicio-spring'
      command: 'build'
      Dockerfile: '**/Dockerfile'
      tags: |
        latest
        $(Build.BuildId)
    displayName: 'Docker Build'

  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      repository: 'nsg2020/microservicio-spring'
      command: 'push'
      tags: |
        latest
        $(Build.BuildId)
    displayName: 'Docker Push'

###Deployment job
- job: Deploy
  dependsOn: Build
  pool: 'localk8s'
  steps:
  - task: Kubernetes@1
    inputs:
      connectionType: 'None'
      command: 'apply'
      arguments: '-f deployment-app.yaml'
    displayName: 'Deployment k8s local'

###Port forward for k8s local    
- job: 'DeployForward'
  dependsOn: Deploy
  pool: 'localk8s'
  steps:
  - script: |
      kubectl port-forward deploy/microservicio-spring-deployment 8080:8080 &
    
###Performance test    
  - task: JMeterInstaller@0
    inputs:
      jmeterVersion: '5.4.2'
    displayName: 'JMeter Installation'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'jmeter -n -t $(System.DefaultWorkingDirectory)/microservicio-spring.jmx -l $(System.DefaultWorkingDirectory)/resultadosJmeter.jtl'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'JMeter run'
  - task: PublishReleaseArtifact@1
    inputs:
      artifactPath: '$(System.DefaultWorkingDirectory)/resultadosJmeter.jtl'
    displayName: 'Upload JMeter result to pipeline logs'
