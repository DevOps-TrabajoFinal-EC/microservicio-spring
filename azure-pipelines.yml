jobs:
- job: Build
  pool:
    vmImage: ubuntu-latest
  displayName: Build

###Build Gradle

  steps: 
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false
    displayName: Build

###JaCoCo 
  
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
      pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
      reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
      failIfCoverageEmpty: true
    displayName: 'JaCoCo test'

  #- task: SonarCloudPrepare@1
  #  inputs:
  #    SonarCloud: 'SonarCloudEC'
  #    organization: 'devops-trabajofinal-ec'
  #    projectKey: 'DevOps-TrabajoFinal-EC_microservicio-spring'
  #    projectName: 'microservicio-spring'
  #  displayName: 'SonarCloud Prepare'

  #- task: Gradle@3
  #  inputs:
  #    gradleWrapperFile: 'gradlew'
  #    tasks: 'sonar'
  #    publishJUnitResults: true
  #    testResultsFiles: '**/TEST-*.xml'
  #    codeCoverageToolOption: 'JaCoCo'
  #    codeCoverageClassFilesDirectories: 'build/classes/main/'
  #    codeCoverageGradle5xOrHigher: false
  #    javaHomeOption: 'JDKVersion'
  #    sonarQubeRunAnalysis: true
  #    sqGradlePluginVersionChoice: 'specify'
  #    sonarQubeGradlePluginVersion: '3.3'
  #    spotBugsAnalysis: false
  #  displayName: 'SonarCloud Analysis'

###Docker build

  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      command: 'login'
    displayName: 'Docker Login'
  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      repository: 'nsg2020/microservicio-spring'
      command: 'build'
      Dockerfile: '**/Dockerfile'
      tags: |
        latest
        $(Build.BuildId)
    displayName: 'Docker Build'

  - task: Docker@2
    inputs:
      containerRegistry: 'DockerHub'
      repository: 'nsg2020/microservicio-spring'
      command: 'push'
      tags: |
        latest
        $(Build.BuildId)
    displayName: 'Docker Push'

###Deployment job
- job: Deploy
  dependsOn: Build
  pool: 'localk8s'
  steps:
 # - script: |
 #     kubectl delete deployment microservicio-spring-deployment
 #     kubectl delete service microservicio-spring-deployment    
  - task: Kubernetes@1
    inputs:
      connectionType: 'None'
      command: 'apply'
      arguments: '-f deployment-app.yaml'
    displayName: 'Deployment k8s local'

###Port forward for k8s local    
- job: 'DeployForward'
  dependsOn: Deploy
  pool: 'localk8s'
  steps:
  - script: |
      kubectl port-forward deploy/microservicio-spring-deployment 8080:8080 &
    
#  - script: |
#      kubectl expose deployment microservicio-spring-deployment --type=LoadBalancer --port=8080
#      sleep 60
#      kubectl delete service microservicio-spring-deployment
#      kubectl port-forward deploy/microservicio-spring-deployment 8080:8080 &


###Performance test    
- job: 'PerformanceTest'
  dependsOn: DeployForward
  pool: 'localk8s'
  steps:
   - script: |
      jmeter -n -t $(System.DefaultWorkingDirectory)/microservicio-spring.jmx -l $(System.DefaultWorkingDirectory)/resultadosJmeter.jtl
  displayName: 'Permormance test JMeter'  

#  - task: TaurusRunner@0
#    inputs:
#      taurusConfig: |
#        execution:
#        - scenario:
#            requests:
#              script: microservicio-spring.jmx
#      jmeterHome: 'C:\Users\xx\Downloads\apache-jmeter-5.5\apache-jmeter-5.5'
#      jmeterPath: 'C:\Users\xxx\Downloads\apache-jmeter-5.5\apache-jmeter-5.5\bin'
#      jmeterVersion: '5.5'
#      outputDir: 'taurus-output'
  
#  - script: jmeter -n -t $(System.DefaultWorkingDirectory)/jmeter/test-plan.jmx -l $(System.DefaultWorkingDirectory)/resultados.jtl

#  - script: 'jmeter -n -t \jmeter\test\PerformanceTesting.jmx -l \jmeter\result\results.jtl'

